/*
 * This file is generated by jOOQ.
 */
package lt.markmerkk.schema1.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lt.markmerkk.schema1.DefaultSchema;
import lt.markmerkk.schema1.Keys;
import lt.markmerkk.schema1.tables.records.WorklogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Worklog extends TableImpl<WorklogRecord> {

    private static final long serialVersionUID = -1406061593;

    /**
     * The reference instance of <code>worklog</code>
     */
    public static final Worklog WORKLOG = new Worklog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorklogRecord> getRecordType() {
        return WorklogRecord.class;
    }

    /**
     * The column <code>worklog.id</code>.
     */
    public final TableField<WorklogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>worklog.start</code>.
     */
    public final TableField<WorklogRecord, Long> START = createField("start", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>worklog.end</code>.
     */
    public final TableField<WorklogRecord, Long> END = createField("end", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>worklog.duration</code>.
     */
    public final TableField<WorklogRecord, Long> DURATION = createField("duration", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>worklog.code</code>.
     */
    public final TableField<WorklogRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>worklog.comment</code>.
     */
    public final TableField<WorklogRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>worklog.remote_id</code>.
     */
    public final TableField<WorklogRecord, Long> REMOTE_ID = createField("remote_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>worklog.is_deleted</code>.
     */
    public final TableField<WorklogRecord, Byte> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worklog.is_dirty</code>.
     */
    public final TableField<WorklogRecord, Byte> IS_DIRTY = createField("is_dirty", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worklog.is_error</code>.
     */
    public final TableField<WorklogRecord, Byte> IS_ERROR = createField("is_error", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>worklog.error_message</code>.
     */
    public final TableField<WorklogRecord, String> ERROR_MESSAGE = createField("error_message", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>worklog.fetchTime</code>.
     */
    public final TableField<WorklogRecord, Long> FETCHTIME = createField("fetchTime", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>worklog.URL</code>.
     */
    public final TableField<WorklogRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>worklog</code> table reference
     */
    public Worklog() {
        this(DSL.name("worklog"), null);
    }

    /**
     * Create an aliased <code>worklog</code> table reference
     */
    public Worklog(String alias) {
        this(DSL.name(alias), WORKLOG);
    }

    /**
     * Create an aliased <code>worklog</code> table reference
     */
    public Worklog(Name alias) {
        this(alias, WORKLOG);
    }

    private Worklog(Name alias, Table<WorklogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Worklog(Name alias, Table<WorklogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Worklog(Table<O> child, ForeignKey<O, WorklogRecord> key) {
        super(child, key, WORKLOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorklogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorklogRecord> getPrimaryKey() {
        return Keys.PK_WORKLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorklogRecord>> getKeys() {
        return Arrays.<UniqueKey<WorklogRecord>>asList(Keys.PK_WORKLOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worklog as(String alias) {
        return new Worklog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worklog as(Name alias) {
        return new Worklog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Worklog rename(String name) {
        return new Worklog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Worklog rename(Name name) {
        return new Worklog(name, null);
    }
}
