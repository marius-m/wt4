/*
 * This file is generated by jOOQ.
 */
package lt.markmerkk.schema1.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lt.markmerkk.schema1.DefaultSchema;
import lt.markmerkk.schema1.Keys;
import lt.markmerkk.schema1.tables.records.TicketRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<TicketRecord> {

    private static final long serialVersionUID = 999845323;

    /**
     * The reference instance of <code>ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketRecord> getRecordType() {
        return TicketRecord.class;
    }

    /**
     * The column <code>ticket.id</code>.
     */
    public final TableField<TicketRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ticket.code_project</code>.
     */
    public final TableField<TicketRecord, String> CODE_PROJECT = createField("code_project", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.code_number</code>.
     */
    public final TableField<TicketRecord, String> CODE_NUMBER = createField("code_number", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.code</code>.
     */
    public final TableField<TicketRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.description</code>.
     */
    public final TableField<TicketRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>ticket.parent_id</code>.
     */
    public final TableField<TicketRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>ticket.remote_id</code>.
     */
    public final TableField<TicketRecord, Long> REMOTE_ID = createField("remote_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>ticket.is_deleted</code>.
     */
    public final TableField<TicketRecord, Byte> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>ticket.is_dirty</code>.
     */
    public final TableField<TicketRecord, Byte> IS_DIRTY = createField("is_dirty", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>ticket.is_error</code>.
     */
    public final TableField<TicketRecord, Byte> IS_ERROR = createField("is_error", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>ticket.error_message</code>.
     */
    public final TableField<TicketRecord, String> ERROR_MESSAGE = createField("error_message", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>ticket.fetchTime</code>.
     */
    public final TableField<TicketRecord, Long> FETCHTIME = createField("fetchTime", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>ticket.URL</code>.
     */
    public final TableField<TicketRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.parent_code</code>.
     */
    public final TableField<TicketRecord, String> PARENT_CODE = createField("parent_code", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.status</code>.
     */
    public final TableField<TicketRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.assignee</code>.
     */
    public final TableField<TicketRecord, String> ASSIGNEE = createField("assignee", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.reporter</code>.
     */
    public final TableField<TicketRecord, String> REPORTER = createField("reporter", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ticket.is_watching</code>.
     */
    public final TableField<TicketRecord, Byte> IS_WATCHING = createField("is_watching", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    /**
     * Create an aliased <code>ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, TicketRecord> key) {
        super(child, key, TICKET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TicketRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TICKET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicketRecord> getPrimaryKey() {
        return Keys.PK_TICKET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicketRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketRecord>>asList(Keys.PK_TICKET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }
}
