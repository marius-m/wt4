package lt.markmerkk.widgets.main

import com.nhaarman.mockitokotlin2.doReturn
import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.junit.Before
import org.junit.Test
import org.mockito.Mock
import org.mockito.MockitoAnnotations

class SidePaneHandlerHandleAnyPaneOpenTest {

    @Mock lateinit var listener: SidePaneHandler.Listener
    @Mock lateinit var paneStateProviderLogs: SidePaneHandler.SidePaneStateProvider
    @Mock lateinit var paneStateProviderTickets: SidePaneHandler.SidePaneStateProvider
    lateinit var sidePaneHandler: SidePaneHandler

    @Before
    fun setUp() {
        MockitoAnnotations.initMocks(this)
        sidePaneHandler = SidePaneHandler(
                listener = listener,
                paneLogs = paneStateProviderLogs,
                paneTickets = paneStateProviderTickets
        )
    }

    @Test
    fun noPaneOpen() {
        // Assemble
        doReturn(false).whenever(paneStateProviderLogs).isOpen()
        doReturn(false).whenever(paneStateProviderTickets).isOpen()

        // Act
        sidePaneHandler.notifyOnSidePaneChange()

        // Assert
        verify(listener).onAllPanesClosed()
    }

    @Test
    fun logsOpen() {
        // Assemble
        doReturn(true).whenever(paneStateProviderLogs).isOpen()
        doReturn(false).whenever(paneStateProviderTickets).isOpen()

        // Act
        sidePaneHandler.notifyOnSidePaneChange()

        // Assert
        verify(listener).onAnySidePaneOpen()
    }

    @Test
    fun ticketsOpen() {
        // Assemble
        doReturn(false).whenever(paneStateProviderLogs).isOpen()
        doReturn(true).whenever(paneStateProviderTickets).isOpen()

        // Act
        sidePaneHandler.notifyOnSidePaneChange()

        // Assert
        verify(listener).onAnySidePaneOpen()
    }

    @Test
    fun bothOpen() {
        // Assemble
        doReturn(true).whenever(paneStateProviderLogs).isOpen()
        doReturn(true).whenever(paneStateProviderTickets).isOpen()

        // Act
        sidePaneHandler.notifyOnSidePaneChange()

        // Assert
        verify(listener).onAnySidePaneOpen()
    }
}