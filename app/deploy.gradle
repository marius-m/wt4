apply plugin: 'javafx-gradle-plugin'

jfx {
    verbose = true
    mainClass = "com.threerings.getdown.launcher.GetdownApp"
    jfxAppOutputDir = "build/libs"
    jfxMainAppJarName = "app.jar"
    deployDir = "src/main/deploy"

    // gradle jfxJar
    css2bin = false
    preLoader = null
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null
    addPackagerJar = true

    // gradle jfxNative
    identifier = "lt.markmerkk.WT4" // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Marius Merkevicius"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL"
    jvmProperties = null
//    jvmArgs = [
//            "-Ddirect=true"
//    ]
    userJvmArgs = null
    launcherArguments = ["app"]
    nativeReleaseVersion = "4.0"
    needShortcut = false
    needMenu = false
    bundleArguments = [
            runtime: null,
            classpath: "getdown-1.6.1-SNAPSHOT.jar app/app.jar"
    ]
    appName = "WT4"
    additionalAppResources = null
    fileAssociations = null
    noBlobSigning = false
    customBundlers
//    skipDaemonModeCheck = true

    skipNativeLauncherWorkaround205 = false

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}

task processJar(dependsOn:shadowJar, type: JavaExec) {
    def deployPropertyFile = new File("${rootDir}","deploy.properties")
    assert deployPropertyFile.exists()
    Properties deployProps = new Properties()
    deployProps.load(new FileInputStream(deployPropertyFile.getAbsolutePath()))

    def siteDir = new File(rootDir, "out4")
    def appDir = new File(rootDir, "out4/app")
    def libsDir = new File(projectDir, "build/libs")
    def digestFile = new File(rootDir, "out4/app/digest.txt")
    def toolsFile = new File(rootDir, "tools/getdown-1.6.1-SNAPSHOT.jar")
    def toolsResourceDir = new File(rootDir, "tools/resource")
    def clientConfigDir = new File(projectDir, "build/libs/app")
    def clientConfig = new File(rootDir, "tools/client.txt")
    def configName = "getdown.txt"
    def infoTemplate = new File(projectDir, "src/main/deploy/package/macosx/Info.plist")

    standardInput = System.in
    classpath = files(toolsFile)
    main = "com.threerings.getdown.tools.Digester"
    workingDir = siteDir
    args = ['app']

    doFirst {
        // Prepare
        project.delete siteDir

        clientConfig.write("appbase = http://212.24.100.154/wt4\n")
        clientConfig << "resource = resources/splash.png\n"
        clientConfig << "resource = resources/icon.png\n"
        clientConfig << "ui.name = WT4\n"
        clientConfig << "ui.background_image = resources/splash.png\n"
        clientConfig << "ui.icon = resources/icon.png\n"
        clientConfig << "ui.icon = resources/icon.png\n"
        clientConfig << "ui.mac_dock_icon = resources/icon.png\n"
        clientConfig << "ui.progress = 20, 260, 360, 20\n"
        clientConfig << "ui.status = 20, 240, 360, 20\n"
        clientConfig << "code = app.jar\n"
        clientConfig << "class = lt.markmerkk.Main2\n"
        clientConfig << "jvmarg = -Dversion_name=$versionName\n"
        clientConfig << "jvmarg = -Dversion_code=$versionCode\n"
        def gaKey = deployProps.getProperty("ga")
        clientConfig << "jvmarg = -Dga_key=$gaKey\n"
        clientConfig << "allow_offline = true\n"

        appDir.mkdirs()
        siteDir.mkdirs()
        clientConfigDir.mkdirs()
        assert clientConfig.exists()
        assert siteDir.exists()
        assert appDir.exists()
        assert libsDir.exists()
        assert toolsResourceDir.exists()
        assert toolsFile.exists()
        assert clientConfigDir.exists()
        assert clientConfig.exists()
        assert infoTemplate.exists()

        // Modify generated libs
        project.delete fileTree(dir: libsDir, exclude: '*-all.jar')
        File outFile = file("${libsDir.absolutePath}/app-${versionName}-all.jar")
        assert outFile.exists()

        // Create configuration for upload
        outFile.renameTo("${libsDir.absolutePath}/app.jar")
        outFile = new File("${libsDir.absolutePath}/app.jar")
        copy {
            from outFile.absolutePath
            into clientConfigDir.absolutePath
        }
        copy {
            from outFile.absolutePath
            into appDir.absolutePath
        }
        outFile.delete()
        copy {
            from toolsFile.absolutePath
            into libsDir.absolutePath
        }
        copy {
            from toolsFile.absolutePath
            into siteDir.absolutePath
        }
        copy {
            from clientConfig.absolutePath
            into clientConfigDir.absolutePath
        }
        def resourceDir = new File(clientConfigDir, "resources")
        resourceDir.mkdirs()
        copy {
            from toolsResourceDir.absolutePath
            into resourceDir.absolutePath
        }
        def builtConfig = new File(clientConfigDir, "client.txt")
        builtConfig.renameTo("$clientConfigDir/$configName")

        copy {
            from clientConfig.absolutePath
            into appDir.absolutePath
        }
        def siteConfig = new File(appDir, "client.txt")
        siteConfig.renameTo("$appDir/$configName")
        def siteResources = new File(appDir, "resources")
        siteResources.mkdirs()
        copy {
            from toolsResourceDir.absolutePath
            into siteResources.absolutePath
        }
    }

    doLast {
        // Move digest to release
        copy {
            from digestFile.absolutePath
            into clientConfigDir.absolutePath
        }

        // Update Info.plist
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        def xml = parser.parse(infoTemplate)
        def dictionary = xml.dict[0].children()
        for (int i = 0; i < dictionary.size(); i++) {
            def node = dictionary[i]
            if ("key" == node.name()) {
                if ("CFBundleExecutable" == node.text()) {
                    dictionary[i+1].value = "WT4" // Change to modified with classpath
                }
                if ("CFBundleShortVersionString" == node.text()) {
                    dictionary[i+1].value = "4.0"
                }
                if ("CFBundleVersion" == node.text()) {
                    dictionary[i+1].value = "4.0"
                }
            }
        }
        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(infoTemplate)))
        printer.preserveWhitespace = true
        printer.print(xml)
    }
}

remotes {
    def deployPropertyFile = new File("${rootDir}","deploy.properties")
    assert deployPropertyFile.exists()
    Properties deployProps = new Properties()
    deployProps.load(new FileInputStream(deployPropertyFile.getAbsolutePath()))

    webServer {
        host = '212.24.100.154'
        user = deployProps.getProperty("remote_user")
        password = deployProps.getProperty("remote_pass")
        authentications = ['password']
    }
}

task deploy << {
    ssh.settings {
        knownHosts = allowAnyHosts
    }
    ssh.run {
        session(remotes.webServer) {
            def localPath = files(
                    new File(rootDir, "out4/app/app.jar"),
                    new File(rootDir, "out4/app/getdown.txt"),
                    new File(rootDir, "out4/app/digest.txt"),
            )
            def localResource = files (
                    new File(rootDir, "out4/app/resources/splash.png"),
                    new File(rootDir, "out4/app/resources/icon.png")
            )
            def remotePath = "/var/www/html/wt4"
            def remoteResourcePath = "$remotePath/resources"
            execute "mkdir -p $remotePath"
            execute "rm -r $remotePath/*"
            execute "mkdir $remoteResourcePath"
            put from: localPath, into: remotePath
            put from: localResource, into: remoteResourcePath
            execute "ls -la $remotePath"
            execute "ls -la $remoteResourcePath"
        }
    }
}

