/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mariusmerkevicius' at '9/2/15 9:55 PM' with Gradle 2.5
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.5/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenLocal()
        //maven {
        //    name = 'BinTray'
        //    url = 'http://dl.bintray.com/content/shemnon/javafx-gradle/'
        //}
//        maven {
//            name = 'CloudBees Snapshot'
//            url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot'
//        }
//        ivy {
//            url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot'
//        }
        jcenter()
        flatDir name: 'localRepository', dirs: '../tools'
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        try {
            assert (jfxrtDir != null)
        } catch (RuntimeException re) {
            ext.jfxrtDir = "."
        }

        ext.searchFile = {Map<String, Closure> places, List<String> searchPaths, String searchID ->
            File result = null;
            places.each { k, v ->
                if (result != null) return;
                project.logger.debug("Looking for $searchID in $k")
                def dir = v()
                if (dir == null) {
                    project.logger.debug("$k not set")
                } else {
                    project.logger.debug("$k is $dir")
                    searchPaths.each { s ->
                        if (result != null) return;
                        File f = new File(dir, s);
                        project.logger.debug("Trying $f.path")
                        if (f.exists() && f.file) {
                            project.logger.debug("found $searchID as $result")
                            result = f;
                        }
                    }
                }
            }
            if (!result?.file) {
                throw new GradleException("Could not find $searchID, please set one of ${places.keySet()}");
            } else {
                project.logger.info("$searchID: ${result}")
                return result
            }
        }
        ext.findJFXJar = {
            return searchFile([
                    'jfxrtDir in Gradle Properties': {jfxrtDir},
                    'JFXRT_HOME in System Environment': {System.env['JFXRT_HOME']},
                    'JAVA_HOME in System Environment': {System.env['JAVA_HOME']},
                    'java.home in JVM properties': {System.properties['java.home']}
            ],
                    ['jfxrt.jar', 'lib/jfxrt.jar', 'lib/ext/jfxrt.jar', 'jre/lib/jfxrt.jar', 'jre/lib/ext/jfxrt.jar'],
                    'JavaFX Runtime Jar')
        }

        ext.findAntJavaFXJar = {
            return searchFile([
                    'jfxrtDir in Gradle Properties': {jfxrtDir},
                    'JFXRT_HOME in System Environment': {System.env['JFXRT_HOME']},
                    'JAVA_HOME in System Environment': {System.env['JAVA_HOME']},
                    'java.home in JVM properties': {System.properties['java.home']}
            ],
                    ['ant-javafx.jar', 'lib/ant-javafx.jar', '../lib/ant-javafx.jar'],
                    'JavaFX Packager Tools')
        }


        classpath 'org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:8.1.2.1-TEST'
        //classpath project(':gradle-javafx-plugin')
        classpath project.files(findAntJavaFXJar())
        classpath project.files(findJFXJar())
    }

}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
//apply plugin: 'org.bitbucket.shemnon.javafxplugin.JavaFXPlugin'
if (!project.plugins.findPlugin(org.bitbucket.shemnon.javafxplugin.JavaFXPlugin)) {
    project.apply(plugin: org.bitbucket.shemnon.javafxplugin.JavaFXPlugin)
}

mainClassName = "lt.markmerkk.Main"

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

group = 'lt.markmerkk'
version = '0.9.4'
def versionCode = '1'

javafx {
    appID 'WT4'
    appName 'WT4'
    mainClass = 'lt.markmerkk.Main'
    profiles {
        macosx {
//            javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/'
            javaRuntime = '<NO RUNTIME>'
            //javaRuntime = '.'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':database')
    compile project(':remote')

    compile 'io.reactivex:rxjavafx:0.0.2'
    compile 'io.reactivex:rxjava:1.1.0'
    //compile 'io.reactivex:rxjava-async-util:0.21.0'

    compile 'joda-time:joda-time:2.9.1'
    compile 'com.vinumeris:updatefx:1.5'
    compile 'com.airhacks:afterburner.fx:1.6.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.jfxtras:jfxtras-agenda:8.0-r5-SNAPSHOT'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'
//    compile group: 'org.slf4j', name: 'slf4j-jdk14', version:'1.7.12'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.assertj:assertj-core:2.2.0'
}

/**
 * Processes jar thorugh {@link com.vinumeris.updatefx.UpdateFX}
 */
task processJar(dependsOn:shadowJar, type: JavaExec) {
    // Preparing project structure
    // todo: This probably should be solved somehow else, as sites should never be deleted
    def processDir = new File(rootDir, "out")
    if (processDir.exists())
        processDir.deleteDir()
    processDir.mkdirs()
    File processBuilds = new File("$rootDir/out", "builds")
    processBuilds.mkdirs()

    standardInput = System.in
    classpath = files("$rootDir/tools/updatefx-app-1.5.2-SNAPSHOT.jar")
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.vinumeris.updatefx.tools.UFXPrepare'
    workingDir = "$rootDir"
    args = ['--pass=123','--url=http://localhost:80/', 'out']

    doFirst {
        def libsDir = new File(projectDir, "build/libs")
        if (libsDir.exists())
            project.delete fileTree(dir: libsDir, exclude: '*-all.jar')
        File outFile = file("${libsDir.absolutePath}/app-${version}-all.jar")
        assert outFile.exists()
        outFile.renameTo("${libsDir.absolutePath}/${versionCode}.jar")
        outFile = new File("${libsDir.absolutePath}/${versionCode}.jar")
        println '### Jar ready from process ###'

        // Using processed files
        println '### Copying ###'
        println "From: $outFile.absolutePath"
        println "Into: $processBuilds.absolutePath"

        copy {
            from outFile.absolutePath
            into processBuilds.absolutePath
        }
        println '### Processing ###'
    }

    doLast {
        println '### Process complete ###'
        def outFile = new File("${rootDir}/out/builds/processed/${versionCode}.jar")
        copy {
            from outFile.absolutePath
            into libsDir.absolutePath
        }
        println '### Outputting processed jar ###'
        println "From: $outFile.absolutePath"
        println "Into: $libsDir.absolutePath"
    }
}

task makeJar(dependsOn:processJar) << {

}

startScripts.dependsOn makeJar


