apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
apply plugin: 'javafx-gradle-plugin'
apply from: 'deploy.gradle'

mainClassName = "lt.markmerkk.Main"

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

group = 'lt.markmerkk'
version = versionName

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    main.java.srcDirs += 'src/main/kotlin'
}

run {
   jvmArgs = [
            "-Dversion_code=" + versionCode,
            "-Dversion_name=" + version,
            "-Dga_key=test"
    ]
}

idea {
    module {
        sourceDirs += file('generated/')
    }
}

dependencies {
    ext.dagger_version = "2.6"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile project(':jira-client')
    compile project(':database')
    compile project(':remote')
    compile project(':models')
    compile project(':components')

    // Google analytics
    compile 'com.brsanthu:google-analytics-java:1.1.2'

    compile 'io.reactivex:rxjavafx:0.0.2'

    compile("com.google.dagger:dagger:${dagger_version}")
    kapt("com.google.dagger:dagger-compiler:${dagger_version}")
//    provided 'javax.annotation:jsr250-api:1.0'

    compile 'joda-time:joda-time:2.9.1'
    compile 'com.airhacks:afterburner.fx:1.7.0'
    compile 'org.jfxtras:jfxtras-agenda:8.0-r5'

}

tasks.withType(JavaExec) {
    systemProperties project.getProperties()
}

jfx {
    verbose = true
    mainClass = "com.threerings.getdown.launcher.GetdownApp"
    jfxAppOutputDir = "build/libs"
    jfxMainAppJarName = "app.jar"
    deployDir = "src/main/deploy"

    // gradle jfxJar
    css2bin = false
    preLoader = null
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null
    addPackagerJar = true

    // gradle jfxNative
    identifier = "lt.markmerkk.WT4" // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Marius Merkevicius"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL"
    jvmProperties = null
    jvmArgs = ["-Ddirect=true"]
//    jvmArgs = null
    userJvmArgs = null
    launcherArguments = ["app"]
    nativeReleaseVersion = "4.0"
    needShortcut = false
    needMenu = false
    bundleArguments = [
            runtime: null,
            executable: "WT_2"
    ]
    appName = "WT4"
    additionalAppResources = null
    secondaryLaunchers = [[appName:"WT4_2", classpath: "app/app.jar"]]
    fileAssociations = null
    noBlobSigning = false
    customBundlers
    skipDaemonModeCheck = true


    skipNativeLauncherWorkaround205 = false

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}

shadowJar.dependsOn assemble
jfxNative.dependsOn processJar
