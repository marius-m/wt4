/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mariusmerkevicius' at '9/2/15 9:55 PM' with Gradle 2.5
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.5/userguide/tutorial_java_projects.html
 */
apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
apply plugin: 'javafx-gradle-plugin'


mainClassName = "lt.markmerkk.Main"

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

group = 'lt.markmerkk'
version = '0.9.9.4'
def versionCode = '7'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    main.java.srcDirs += 'src/main/kotlin'
}

run {
    def deployPropertyFile = new File("${rootDir}","deploy.properties")
    assert deployPropertyFile.exists()
    Properties deployProps = new Properties()
    deployProps.load(new FileInputStream(deployPropertyFile.getAbsolutePath()))
    jvmArgs = [
            "-Dversion_code=" + versionCode,
            "-Dversion_name=" + version,
            "-Dga_key=" + deployProps.getProperty("ga")
    ]
}

idea {
    module {
        sourceDirs += file('generated/')
    }
}

dependencies {
    ext.dagger_version = "2.6"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile project(':jira-client')
    compile project(':database')
    compile project(':remote')
    compile project(':models')
    compile project(':components')

    // Google analytics
    compile 'com.brsanthu:google-analytics-java:1.1.2'

    compile 'io.reactivex:rxjavafx:0.0.2'

    compile("com.google.dagger:dagger:${dagger_version}")
    kapt("com.google.dagger:dagger-compiler:${dagger_version}")
//    provided 'javax.annotation:jsr250-api:1.0'

    compile 'joda-time:joda-time:2.9.1'
    compile 'com.airhacks:afterburner.fx:1.7.0'
    compile 'org.jfxtras:jfxtras-agenda:8.0-r5'

}

tasks.withType(JavaExec) {
    systemProperties project.getProperties()
}

jfx {
    verbose = true
    mainClass = "com.threerings.getdown.launcher.GetdownApp"
    jfxAppOutputDir = "build/libs"
    jfxMainAppJarName = "app.jar"
    deployDir = "src/main/deploy"

    // gradle jfxJar
    css2bin = false
    preLoader = null
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null
    addPackagerJar = true

    // gradle jfxNative
    identifier = "lt.markmerkk.WT4" // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Marius Merkevicius"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL"
    jvmProperties = null
    jvmArgs = ["-Ddirect=true"]
//    jvmArgs = null
    userJvmArgs = null
    launcherArguments = ["app"]
    nativeReleaseVersion = "1.0"
    needShortcut = false
    needMenu = false
    bundleArguments = [
            runtime: null,
            executable: "WT_2"
    ]
    appName = "WT4"
    additionalAppResources = null
    secondaryLaunchers = [[appName:"WT4_2", classpath: "app/app.jar"]]
    fileAssociations = null
    noBlobSigning = false
    customBundlers
    skipDaemonModeCheck = true


    skipNativeLauncherWorkaround205 = false

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}


task processJar(dependsOn:shadowJar, type: JavaExec) {

    def siteDir = new File(rootDir, "out4")
    def appDir = new File(rootDir, "out4/app")
    def libsDir = new File(projectDir, "build/libs")
    def toolsFile = new File(rootDir, "tools/getdown-1.5.jar")
    def clientConfigDir = new File(projectDir, "build/libs/app")
    def clientConfig = new File(rootDir, "tools/client.txt")
    def remoteConfig = new File(rootDir, "tools/remote.txt")
    def configName = "getdown.txt"
    def infoTemplate = new File(projectDir, "src/main/deploy/package/macosx/Info.plist")

    standardInput = System.in
    classpath = files(toolsFile)
    main = "com.threerings.getdown.tools.Digester"
    workingDir = siteDir
    args = ['app']

    doFirst {
        // Prepare
        project.delete siteDir

        appDir.mkdirs()
        siteDir.mkdirs()
        clientConfigDir.mkdirs()
        assert siteDir.exists()
        assert appDir.exists()
        assert libsDir.exists()
        assert toolsFile.exists()
        assert clientConfigDir.exists()
        assert clientConfig.exists()
        assert infoTemplate.exists()

        // Modify generated libs
        project.delete fileTree(dir: libsDir, exclude: '*-all.jar')
        File outFile = file("${libsDir.absolutePath}/app-${version}-all.jar")
        assert outFile.exists()

        // Create configuration for upload
        outFile.renameTo("${libsDir.absolutePath}/app.jar")
        outFile = new File("${libsDir.absolutePath}/app.jar")
        copy {
            from outFile.absolutePath
            into clientConfigDir.absolutePath
        }
        copy {
            from outFile.absolutePath
            into appDir.absolutePath
        }
        outFile.delete()
        copy {
            from toolsFile.absolutePath
            into libsDir.absolutePath
        }
        copy {
            from toolsFile.absolutePath
            into siteDir.absolutePath
        }
        copy {
            from clientConfig.absolutePath
            into clientConfigDir.absolutePath
        }
        def builtConfig = new File(clientConfigDir, "client.txt")
        builtConfig.renameTo("$clientConfigDir/$configName")

        copy {
            from remoteConfig.absolutePath
            into appDir.absolutePath
        }
        def siteConfig = new File(appDir, "remote.txt")
        siteConfig.renameTo("$appDir/$configName")
    }

    doLast {
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        def xml = parser.parse(infoTemplate)
        def dictionary = xml.dict[0].children()
        for (int i = 0; i < dictionary.size(); i++) {
            def node = dictionary[i]
            if ("key" == node.name()) {
                if ("CFBundleExecutable" == node.text()) {
                    dictionary[i+1].value = "WT4_2" // Change to modified with classpath
                }
                if ("CFBundleShortVersionString" == node.text()) {
                    dictionary[i+1].value = version
                }
                if ("CFBundleVersion" == node.text()) {
                    dictionary[i+1].value = version
                }
            }
        }
        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(infoTemplate)))
        printer.preserveWhitespace = true
        printer.print(xml)
    }
}

shadowJar.dependsOn assemble
jfxNative.dependsOn processJar
