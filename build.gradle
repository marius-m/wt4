buildscript {
  ext.kotlin_version = '1.1.2-3'
  ext.kotlin_test_version = '1.4.0'

  repositories {
    mavenLocal()
    jcenter()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    classpath 'org.hidetake:gradle-ssh-plugin:2.5.1'
  }
}

apply plugin: 'org.hidetake.ssh'

allprojects {
  ext.versionName = "1.0.7"
  ext.versionCode = "26"

  apply plugin: 'maven'
  apply plugin: 'kotlin'
  apply plugin: 'java'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenLocal()

    maven { url "https://maven.atlassian.com/content/repositories/atlassian-public" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://gradle.artifactoryonline.com/gradle/libs/" }
    maven { url "http://maven.wso2.org/nexus/content/groups/wso2-public/" }

  }

//  configurations.all {}
  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile 'io.reactivex:rxjava:1.3.6'
    compile 'io.reactivex:rxjava-async-util:0.21.0'

    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "com.nhaarman:mockito-kotlin:$kotlin_test_version"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.8.9'
    testCompile 'org.assertj:assertj-core:2.2.0'
  }

//  tasks.withType(Test) {
//    testLogging {
//      events "passed", "skipped", "failed", "standardOut"
//      showExceptions true
//      exceptionFormat "full"
//      showCauses true
//      showStackTraces true
//      debug {
//        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
//        exceptionFormat "full"
//      }
//      info.events = debug.events
//      info.exceptionFormat = debug.exceptionFormat
//      afterSuite { desc, result ->
//        if (!desc.parent) {
//          def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
//          def startItem = '|  ', endItem = '  |'
//          def repeatLength = startItem.length() + output.length() + endItem.length()
//          println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//        }
//      }
//    }
//  }

}
