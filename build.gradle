/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mariusmerkevicius' at '10/18/15 7:14 PM' with Gradle 2.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://maven.atlassian.com/content/repositories/atlassian-public" }
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply from: 'javafx.plugin'

repositories {
    jcenter()
}

sourceSets {
    dagger {
        java {
            srcDirs = ['src/dagger/java']
        }
    }
}

configurations {
    compileDagger
}

dependencies {
//    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
//    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile group: 'org.jfxtras', name: 'jfxtras-agenda', version: '8.0-r5-SNAPSHOT'

    // Dagger2 dependencies
    compile 'org.glassfish:javax.annotation:10.0-b28'
    compile group: 'com.google.dagger', name: 'dagger', version:'2.1-SNAPSHOT'
    compile group: 'com.google.dagger', name: 'dagger-compiler', version:'2.1-SNAPSHOT'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.assertj:assertj-core:2.2.0'
}

// Configures plugin
//javafx {
//    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
//    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.8.0_72.jdk'
//
//    // Application name and ID presented by target OS
////    appID 'Wt4'
////    appName 'Wt4'
//
//    // Main class of application
//    mainClass 'lt.markmerkk.Main'
//
//    // JVM arguments, system properties, application command line arguments
//    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
//    systemProperties = ['prism.disableRegionCaching':'true']
//    arguments = ['-l', '--fast']
//
//    // Keystore credentials for signing JAR
//    // Generate key: keytool -genkey -alias release -keyalg RSA -keystore keystore.jks -keysize 2048
//    releaseKey {
//        alias = 'release'
//        keyPass = 'asdf123'
//        keyStore = file("${System.properties['user.home']}/global_keystore.jks")
//        storePass = 'asdf123'
//    }
//
//    signingMode 'release'
//
//
//    profiles {
//        // not every possible platform override, but ones that have a known impact
//        windows {
//            id = 'c533f663-1efd-489f-b910-4c7ec20c7fd0'
//            category = 'JavaFX Demos'
//            javaRuntime = 'ï»¿C:\\Program Files\\Java\\jdk1.8.0_72'
//
//            bundleArguments = [
//                // for EXE and MSI bundles
//                'win.menuGroup' : 'Gradle Samples',	 //If menuHint is set, then this is the menu group to install the application into.
//
//                // fir MSI bundles, they have stricter version numbering rules
//                'win.msi.productVersion' : '8.1.2'
//            ]
//        }
//
//        macosx {
//            category = 'public.app-category.developer-tools'
//            javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/'
//
//            bundleArguments = [
//                // for mac apps
//                'mac.category' : 'public.app-category.developer-tools',
//                'mac.CFBundleIdentifier' : 'com.shemnon.gradle-plugin.FullyExpressed',
//                'mac.CFBundleName' : 'Fully Expressed',
//                'mac.signing-key-user-name' : 'Danno Ferrin',
//                //'mac.signing-key-developer-id-app' : 'Developer ID Application: Danno Ferrin' // usually redundant with mac.signing-key-user-name
//                'mac.bundle-id-signing-prefix' : 'com.shemnon.gradle-plugin.FE.',
//
//                // for PKG bundles
//                //'mac.signing-key-developer-id-installer' : 'Developer ID Installer: Danno Ferrin', // usually redundant with mac.signing-key-user-name
//
//                // for Mac App Store Ready bundles
//                'mac.app-store-entitlements' : 'src/deploy/package/NetworkEntitlements.entitlements',
//                //'mac.signing-key-app' : '3rd Party Mac Developer Applicaiton: Danno Ferrin', // usually redundant with mac.signing-key-user-name
//                //'mac.signing-key-pkg' : '3rd Party Mac Developer Installer: Danno Ferrin', // usually redundant with mac.signing-key-user-name
//
//            ]
//        }
//
//        linux {
//            // linux doesn't care about id, it goes un-used at the moment
//            category = 'Development'
//            // good luck finding a standard location for the JDK
//            //javaRuntime = '/usr/lib/jvm/java-7-oracle'
//
//            bundleArguments = [
//                // for DEB bundles
//                'email' : 'support@example.com', // This is the email used for the deb maintainer field.
//            ]
//        }
//    }
//
////    debugKey {
////        alias = 'buggyKey'
////        keyPass = '123456'
////        keyStore = file('veryinsecure.jks')
////        storePass = '123456'
////    }
//    // don't get too excited, the release key is overridden by gradle.properties
////    releaseKey {
////        alias = 'imaginary'
////        keyPass = 'bad'
////        keyStore = file('nonexistant.jks')
////        storePass = 'bad'
////    }
////    signingMode 'release'
//
////    appID 'FullyExpressed'
////    appName 'Fully Expressed Build File'
////    mainClass 'org.bitbucket.shemnon.jfx.sample.fullyexpressed.TheMain'
//
////    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
////    systemProperties = [ 'prism.disableRegionCaching':'true' ]
////    arguments = ['1AC', '1NC', '2AC', '2NC', '1NR', '1AR', '2NR', '2AR']
//
////    embedLauncher = true // caution: class-path not set and is overwritten if set to false
//
//    // applet and webstart stuff
////    width = 800
////    height = 600
////    embedJNLP = false
//
//
//    // deplpy/info attributes
//    category = 'demo'
//    copyright = 'Copyright (c) 2012, 2014 Danno Ferrin'
//    description = '''If it can and ever should be configured, it is configured in this build.
//But really, you should live with the conventions when appropriate.'''
//    licenseType = '3 clause BSD'
//    vendor = 'Me!'
//
//    // deploy/preferences attributes
//    installSystemWide = true
//    menu = true
//    shortcut = true
//
//    codebase = 'http://example.com/bogus/JNLP/Codebase'
//
//    // app icons
////    icons {
////        shortcut = ['shortcut-16.png', 'shortcut-32.png', 'shortcut-128.png', 'shortcut-256.png', 'shortcut-16@2x.png', 'shortcut-32@2x.png', 'shortcut-128@2x.png']
////        volume = 'javafx-icon.png'
////        setup = 'javafx-icon.png'
////    }
//
//    // jnlp icons, legacy
////    icon {
////        href = 'src/main/resources/javafx-icon.png'
////        kind = 'splash'
////        width = 128
////        height = 128
////    }
////    icon {
////        href = 'shortcut-32@2x.png'
////        kind = 'selected'
////        width = 16
////        height = 16
////        scale = 1
////    }
//
//    bundleArguments {
//        licenseFile = 'LICENSE' // click through license file for some bundlers
//        userJvmOptions = [ '-Xmx' : '128m',  '-Xms' : '128m'] // A mechanism to allow programs to adjust JVM Options
//        preferencesID = 'com.shemnon.fullyExpressed' // implementation detail for user JVM options
//    }
//
//}

compileJava {
    description = "dagger annotation processor is loaded automatically from classpath"
    sourceSets.dagger.java.srcDirs*.mkdirs()
    classpath += configurations.compileDagger
    options.compilerArgs += [
            '-s', sourceSets.dagger.java.srcDirs.iterator().next()
    ]
}

clean {
    description = "delete files in generated source directory tree"
    delete fileTree(dir: sourceSets.dagger.java.srcDirs.iterator().next())
}